/*THIS FILE WAS GENERATED BY A SCRIPT. DO NOT EDIT DIRECTLY.*/

import { UnitOfMeasure } from "../../../Definitions/Global/UOM.js";
import { Family } from "../../../Definitions/Global/Families.js";
import type { NodeInfo } from "../../../Model/NodeInfo.js";
import type { ISY } from "../../../ISY.js";
import { Base } from "../index.js";
import { Driver } from "../../../Definitions/Global/Drivers.js";
import { Poly } from "../../../Definitions/index.js";
import type { DriverState } from "../../../Model/DriverState.js";
import { NodeFactory } from "../../NodeFactory.js";

export const nodeDefId = "BRIDGE";

type Commands = OutputNode.Commands;
type Drivers = OutputNode.Drivers;

export class OutputNode extends Base<Drivers, Commands> {
	public readonly commands = {
		UPDATE: this.forceUpdate
	};
	static nodeDefId = "BRIDGE";
	constructor (isy: ISY, nodeInfo: NodeInfo) {
		super(isy, nodeInfo);
		this.drivers.ST = Driver.create("ST", this, nodeInfo.property as DriverState, { uom: UnitOfMeasure.Index, label: "Connected", name: "connected" });
	}
	async forceUpdate() {
		return this.sendCommand("UPDATE");
	}
	public get connected(): Poly.BridgeQuery {
		return this.drivers.ST?.value;
	}
}

NodeFactory.register(OutputNode);

export namespace OutputNode {
	export type Commands = {
		UPDATE: (() => Promise<boolean>) & {
			label: "Force Update";
			name: "forceUpdate";
		};
	};
	export type Drivers = {
		ST?: {
			uom: UnitOfMeasure.Index;
			value: Poly.BridgeQuery;
			label: "Connected";
			name: "connected";
		};
	};
}
