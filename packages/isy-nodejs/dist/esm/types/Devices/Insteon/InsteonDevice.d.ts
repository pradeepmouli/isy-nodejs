import { Family, InsteonBaseDevice, ISY } from '../../ISY.js';
import { Constructor } from '../Constructor.js';
import { InsteonRelayDevice } from './InsteonRelayDevice.js';
import 'winston';
export declare const InsteonLampDevice: <T extends Constructor<InsteonBaseDevice>>(IB: T) => {
    new (...args: any[]): {
        isDimmable: boolean;
        convertFrom(value: any, uom: import("../../Definitions/index.js").UnitOfMeasure, driver?: never): any;
        convertTo(value: any, uom: import("../../Definitions/index.js").UnitOfMeasure, propertyName?: never): any;
        sendBeep(level?: number): Promise<any>;
        family: Family.Insteon;
        readonly typeCode: string;
        readonly deviceClass: any;
        readonly category: import("../../ISY.js").Categories;
        readonly subCategory: number;
        _enabled: any;
        productName: string;
        model: string;
        modelNumber: string;
        version: string;
        _parentDevice: import("../../ISYDevice.js").ISYDevice<Family.Insteon, any, any, any>;
        children: import("../../ISYNode.js").ISYNode<any, any, any, any>[];
        addChild<K extends import("../../ISYNode.js").ISYNode<any, any, any, any>>(childDevice: K): void;
        "__#330883@#parentNode": import("../../ISYNode.js").ISYNode<any, any, any, any>;
        readonly address: string;
        readonly baseLabel: string;
        readonly flag: any;
        readonly isy: ISY;
        readonly nodeDefId: string;
        baseName: any;
        commands: import("../../Definitions/index.js").Command.ForAll<{}>;
        drivers: import("../../Definitions/index.js").Driver.ForAll<{
            ST: import("../../Definitions/index.js").Driver.Signature<import("../../Definitions/index.js").UnitOfMeasure, any, string, string>;
        }, false>;
        enabled: boolean;
        events: string;
        folder: string;
        hidden: boolean;
        isLoad: boolean;
        label: string;
        lastChanged: Date;
        location: string;
        logger: (msg: any, level?: keyof import("winston/lib/winston/config/index.js").CliConfigSetLevels, ...meta: any[]) => import("winston").Logger;
        name: string;
        nodeType: number;
        parent: any;
        parentAddress: any;
        parentType: import("../../ISYConstants.js").NodeType;
        propsInitialized: boolean;
        scenes: import("../../ISYScene.js").ISYScene[];
        spokenName: string;
        type: any;
        readonly parentNode: import("../../ISYNode.js").ISYNode<any, any, any, any>;
        addLink(isyScene: import("../../ISYScene.js").ISYScene): void;
        applyStatus(prop: import("../../Model/DriverState.js").DriverState): void;
        convert(value: any, from: import("../../Definitions/index.js").UnitOfMeasure, to: import("../../Definitions/index.js").UnitOfMeasure): any;
        emit(event: "PropertyChanged" | "ControlTriggered", propertyName?: string, newValue?: any, oldValue?: any, formattedValue?: string, controlName?: string): boolean;
        generateLabel(template: string): string;
        getNotes(): Promise<import("../../ISYNode.js").NodeNotes>;
        handleControlTrigger(controlName: string): boolean;
        handleEvent(event: {
            control?: any;
            data?: any;
            node?: any;
            action?: any;
            fmtAct?: any;
        }): boolean;
        handlePropertyChange(propertyName: "ST", value: any, uom: import("../../Definitions/index.js").UnitOfMeasure, formattedValue: string, prec?: number): boolean;
        on(event: "PropertyChanged", listener: (propertyName: "ST", newValue: any, oldValue: any, formattedValue: string) => any): any;
        on(event: "ControlTriggered", listener: (controlName: never) => any): any;
        parseResult(node: {
            property: import("../../Model/DriverState.js").DriverState | import("../../Model/DriverState.js").DriverState[];
        }): void;
        readProperties(): Promise<import("../../Model/DriverState.js").DriverState[]>;
        readProperty(propertyName: "ST"): Promise<import("../../Model/DriverState.js").DriverState>;
        refresh(): Promise<any>;
        refreshNotes(): Promise<void>;
        sendCommand(command: never, parameters?: Record<string | symbol, string | number | undefined> | string | number): Promise<any>;
        updateProperty(propertyName: "ST", value: any): Promise<any>;
        [EventEmitter.captureRejectionSymbol]?(error: Error, event: string, ...args: any[]): void;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        listenerCount(eventName: string | symbol, listener?: Function): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): Array<string | symbol>;
    };
} & T;
export declare const KeypadDevice: <T extends Constructor<InsteonBaseDevice>>(IB: T) => {
    new (...args: any[]): {
        convertFrom(value: any, uom: import("../../Definitions/index.js").UnitOfMeasure, driver?: never): any;
        convertTo(value: any, uom: import("../../Definitions/index.js").UnitOfMeasure, propertyName?: never): any;
        sendBeep(level?: number): Promise<any>;
        family: Family.Insteon;
        readonly typeCode: string;
        readonly deviceClass: any;
        readonly category: import("../../ISY.js").Categories;
        readonly subCategory: number;
        _enabled: any;
        productName: string;
        model: string;
        modelNumber: string;
        version: string;
        _parentDevice: import("../../ISYDevice.js").ISYDevice<Family.Insteon, any, any, any>;
        children: import("../../ISYNode.js").ISYNode<any, any, any, any>[];
        addChild<K extends import("../../ISYNode.js").ISYNode<any, any, any, any>>(childDevice: K): void;
        "__#330883@#parentNode": import("../../ISYNode.js").ISYNode<any, any, any, any>;
        readonly address: string;
        readonly baseLabel: string;
        readonly flag: any;
        readonly isy: ISY;
        readonly nodeDefId: string;
        baseName: any;
        commands: import("../../Definitions/index.js").Command.ForAll<{}>;
        drivers: import("../../Definitions/index.js").Driver.ForAll<{
            ST: import("../../Definitions/index.js").Driver.Signature<import("../../Definitions/index.js").UnitOfMeasure, any, string, string>;
        }, false>;
        enabled: boolean;
        events: string;
        folder: string;
        hidden: boolean;
        isDimmable: boolean;
        isLoad: boolean;
        label: string;
        lastChanged: Date;
        location: string;
        logger: (msg: any, level?: keyof import("winston/lib/winston/config/index.js").CliConfigSetLevels, ...meta: any[]) => import("winston").Logger;
        name: string;
        nodeType: number;
        parent: any;
        parentAddress: any;
        parentType: import("../../ISYConstants.js").NodeType;
        propsInitialized: boolean;
        scenes: import("../../ISYScene.js").ISYScene[];
        spokenName: string;
        type: any;
        readonly parentNode: import("../../ISYNode.js").ISYNode<any, any, any, any>;
        addLink(isyScene: import("../../ISYScene.js").ISYScene): void;
        applyStatus(prop: import("../../Model/DriverState.js").DriverState): void;
        convert(value: any, from: import("../../Definitions/index.js").UnitOfMeasure, to: import("../../Definitions/index.js").UnitOfMeasure): any;
        emit(event: "PropertyChanged" | "ControlTriggered", propertyName?: string, newValue?: any, oldValue?: any, formattedValue?: string, controlName?: string): boolean;
        generateLabel(template: string): string;
        getNotes(): Promise<import("../../ISYNode.js").NodeNotes>;
        handleControlTrigger(controlName: string): boolean;
        handleEvent(event: {
            control?: any;
            data?: any;
            node?: any;
            action?: any;
            fmtAct?: any;
        }): boolean;
        handlePropertyChange(propertyName: "ST", value: any, uom: import("../../Definitions/index.js").UnitOfMeasure, formattedValue: string, prec?: number): boolean;
        on(event: "PropertyChanged", listener: (propertyName: "ST", newValue: any, oldValue: any, formattedValue: string) => any): any;
        on(event: "ControlTriggered", listener: (controlName: never) => any): any;
        parseResult(node: {
            property: import("../../Model/DriverState.js").DriverState | import("../../Model/DriverState.js").DriverState[];
        }): void;
        readProperties(): Promise<import("../../Model/DriverState.js").DriverState[]>;
        readProperty(propertyName: "ST"): Promise<import("../../Model/DriverState.js").DriverState>;
        refresh(): Promise<any>;
        refreshNotes(): Promise<void>;
        sendCommand(command: never, parameters?: Record<string | symbol, string | number | undefined> | string | number): Promise<any>;
        updateProperty(propertyName: "ST", value: any): Promise<any>;
        [EventEmitter.captureRejectionSymbol]?(error: Error, event: string, ...args: any[]): void;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        listenerCount(eventName: string | symbol, listener?: Function): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): Array<string | symbol>;
    };
} & T;
export declare class InsteonOutletDevice extends InsteonRelayDevice {
    constructor(isy: ISY, deviceNode: any);
}
//# sourceMappingURL=InsteonDevice.d.ts.map