import { Family } from "../../../Definitions/Global/Families.js";
import type { NodeInfo } from "../../../Model/NodeInfo.js";
import type { ISY } from "../../../ISY.js";
import { ISYDeviceNode } from "../../ISYDeviceNode.js";
export declare const nodeDefId = "InsteonDimmer";
type Commands = {
    DON: (value: number) => Promise<boolean>;
    DOF: () => Promise<boolean>;
    DFOF: () => Promise<boolean>;
    DFON: () => Promise<boolean>;
    BRT: () => Promise<boolean>;
    DIM: () => Promise<boolean>;
    FDUP: () => Promise<boolean>;
    FDDOWN: () => Promise<boolean>;
    FDSTOP: () => Promise<boolean>;
    BEEP: () => Promise<boolean>;
    QUERY: () => Promise<boolean>;
    CLIMD: (value: number) => Promise<boolean>;
    CLIFS: (value: (0 | 1)) => Promise<boolean>;
    CLISPH: (value: number) => Promise<boolean>;
    CLISPC: (value: number) => Promise<boolean>;
    CLISPHD: (value: number) => Promise<boolean>;
    CLISPCD: (value: number) => Promise<boolean>;
};
type Drivers = {};
export declare class InsteonDimmerNode extends ISYDeviceNode<Family.Scene, Drivers, Commands> {
    readonly commands: Commands;
    drivers: Drivers;
    static nodeDefId: string;
    constructor(isy: ISY, nodeInfo: NodeInfo);
    turnOn(value: number): Promise<any>;
    turnOff(): Promise<any>;
    fastOff(): Promise<any>;
    fastOn(): Promise<any>;
    brighten(): Promise<any>;
    dim(): Promise<any>;
    fadeUp(): Promise<any>;
    fadeDown(): Promise<any>;
    fadeStop(): Promise<any>;
    beep(): Promise<any>;
    query(): Promise<any>;
    mode(value: number): Promise<any>;
    fanMode(value: (0 | 1)): Promise<any>;
    heatSetpoint(value: number): Promise<any>;
    coolSetpoint(value: number): Promise<any>;
    heatSetpointShift(value: number): Promise<any>;
    coolSetpointShift(value: number): Promise<any>;
}
export {};
//# sourceMappingURL=InsteonDimmerNode.d.ts.map